volumes:
  data:
    name: dahlia-anvil-${envId}
networks:
  dahlia:
    name: dahlia

# Please use `pnpm nx run scripts:recreate-docker-otterscan`
# This should read config/default.yaml and set the environment variables
services:
  anvil:
    image: ghcr.io/foundry-rs/foundry:v0.3.0
    hostname: ${envId}-anvil
    networks:
      - dahlia
    #    platform: linux/amd64
    environment:
      - ANVIL_IP_ADDR=0.0.0.0
    entrypoint: anvil
    command: >
      --fork-url ${RPC_URL}
      --fork-block-number ${BLOCK_NUMBER}
      --cache-path /home/foundry/anvil
      --state-interval 1
      --state anvil/${COMPOSE_PROJECT_NAME}.json
    ports:
      - "${RPC_PORT}:8545"
    volumes:
      - data:/home/foundry/anvil
    working_dir: /home/foundry

  otterscan:
    image: otterscan/otterscan:v2.6.1
    hostname: ${envId}-otterscan
    networks:
      - dahlia
    depends_on:
      - anvil
    environment:
      - OTTERSCAN_CONFIG=${OTTERSCAN_CONFIG}
  #    ports:
  #      - "${OTTERSCAN_PORT}:80"

  nginx:
    build: ./nginx
    hostname: ${envId}-proxy
    environment:
      ANVIL_HOST: ${envId}-anvil
      OTTERSCAN_HOST: ${envId}-otterscan
    ports:
      - ${OTTERSCAN_PORT}:80
    depends_on:
      - anvil
      - otterscan
      - graph-node
    networks:
      dahlia:

  graph-node:
    #    image: graphprotocol/graph-node:v0.35.0
    # supports arm https://hub.docker.com/r/fluencelabs/graph-node/tags
    image: fluencelabs/graph-node:v0.35.1
    hostname: ${envId}-ingest
    restart: always
    depends_on:
      - anvil
    networks:
      - dahlia
    ports:
      #      - 8000:8000
      #      - 8001:8001
      - ${GRAPH_NODE_RPC_PORT}:8020
    #      - 8030:8030
    #      - 8040:8040
    #    depends_on:
    #      ipfs:
    #        condition: service_healthy
    #      postgres:
    #        condition: service_started
    entrypoint: >
      /bin/sh -c "
      unset GRAPH_NODE_CONFIG &&
      wait_for ipfs:5001 &&
      wait_for ${envId}-anvil:8545 &&
      exec graph-node
      "
    environment:
      #      node_id: index_node_${envId}
      #      node_role: index-node
      #      postgres_host: postgres
      #      postgres_user: subgraph
      #      postgres_pass: subgraph
      #      postgres_db: subgraph
      #      ipfs: ipfs:5001
      #      ethereum: "${envId}:http://${envId}-anvil:8545"
      GRAPH_NODE_ID: index_node_${envId}
      IPFS: ipfs:5001
      ETHEREUM_RPC: ${envId}:http://${envId}-anvil:8545
      POSTGRES_URL: postgresql://subgraph:subgraph@postgres/subgraph
      GRAPH_LOG: info
      ETHEREUM_BLOCK_BATCH_SIZE: 40
      GRAPH_START_BLOCK: ${BLOCK_NUMBER}
      ETHEREUM_REORG_THRESHOLD: 1
      ETHEREUM_ANCESTOR_COUNT: 1
      ETHEREUM_POLLING_INTERVAL: 5000
#  sourcify:
##    image: ghcr.io/ethereum/sourcify/server:1.7.0
#    build:
#      context: sourcify
#      dockerfile: Dockerfile
#    environment:
#      DOCKER_HOST_POSTGRES_TEST_PORT: 5432
#      SOURCIFY_POSTGRES_HOST: "db"
#      SOURCIFY_POSTGRES_DB: "sourcify"
#      SOURCIFY_POSTGRES_USER: "sourcify"
#      SOURCIFY_POSTGRES_PASSWORD: "sourcify"
#      SOURCIFY_POSTGRES_PORT: 5432
#    ports:
#      - "5555:5555"
